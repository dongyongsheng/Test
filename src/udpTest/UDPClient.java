package udpTest;

import java.io.IOException;
import java.io.InterruptedIOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;

/**
 * UDP客户端
 * @author dys
 *
 */
public class UDPClient {
	private static final int TIMEOUT = 5000;  //设置接收数据的超时时间
	private static final int MAXNUM = 5;      //设置重发数据的最多次数
	public static void main(String args[])throws IOException{
		String str_send = "你好啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊!";
		byte[] buf = new byte[1024];
		//客户端在9000端口监听接收到的数据
		DatagramSocket ds = new DatagramSocket(9000);
		InetAddress loc = InetAddress.getLocalHost(); 
		//定义用来发送数据的DatagramPacket实例
		DatagramPacket dp_send= new DatagramPacket(str_send.getBytes(),str_send.getBytes().length,loc,3000);
		//定义用来接收数据的DatagramPacket实例
		DatagramPacket dp_receive = new DatagramPacket(buf, 1024);
		//数据发向本地3000端口
		ds.setSoTimeout(TIMEOUT);              //设置接收数据时阻塞的最长时间
		int tries = 0;                         //重发数据的次数
		boolean receivedResponse = false;     //是否接收到数据的标志位
		//直到接收到数据，或者重发次数达到预定值，则退出循环
		while(!receivedResponse && tries<MAXNUM){
			//发送数据
			ds.send(dp_send);
			try{
				//接收从服务端发送回来的数据
				ds.receive(dp_receive);
				//如果接收到的数据不是来自目标地址，则抛出异常
				if(!dp_receive.getAddress().equals(loc)){
					throw new IOException("从一个已知的源接收数据包...");
				}
				//如果接收到数据。则将receivedResponse标志位改为true，从而退出循环
				receivedResponse = true;
			}catch(InterruptedIOException e){
				//如果接收数据时阻塞超时，重发并减少一次重发的次数
				tries += 1;
				System.out.println("Time out," + (MAXNUM - tries) + " more tries..." );
			}
		}
		if(receivedResponse){
			//如果收到数据，则打印出来
			System.out.println("客户端收到服务端数据：");
			String str_receive = new String(dp_receive.getData(),0,str_send.getBytes().length) + 
					" 来自 IP: " + dp_receive.getAddress().getHostAddress() + " 端口:" + dp_receive.getPort();
			System.out.println(str_receive);
			//由于dp_receive在接收了数据之后，其内部消息长度值会变为实际接收的消息的字节数，
			//所以这里要将dp_receive的内部消息长度重新置为1024
			dp_receive.setLength(1024);   
		}else{
			//如果重发MAXNUM次数据后，仍未获得服务器发送回来的数据，则打印如下信息
			System.out.println("无响应 -- 放弃.");
		}
		ds.close();
	}  
} 